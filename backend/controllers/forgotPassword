const crypto = require('crypto');
const nodemailer = require('nodemailer');
const bcrypt = require('bcryptjs');
const User = require('../models/userSchema');

// 1. Request password reset
async function forgotPassword(req, res) {
  const { username } = req.body;
  const user = await User.findOne({ username });
  if (!user) return res.status(404).json({ message: 'User not found with given username' });

  const email = user.email;
  const code = crypto.randomInt(100000, 999999).toString();
  user.resetCode = code;
  user.resetCodeExpiry = Date.now() + 3 * 60 * 1000; // 3 minutes
  await user.save();

  // Send email (configure transporter for your SMTP)
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    }
  });
  await transporter.sendMail({
    from: process.env.EMAIL_USER,
    to: user.email,
    subject: 'Your password reset code',
    text: `Your verification code is: ${code}`
  });

  res.json({ message: 'Verification code sent to email' });
}

// 2. Verify code
async function verifyCode(req, res) {
  const { email, code } = req.body;
  const user = await User.findOne({ email, resetCode: code });
  if (!user || user.resetCodeExpiry < Date.now()) {
    return res.status(400).json({ message: 'Invalid or expired code' });
  }
  res.json({ message: 'Code verified' });
}

// 3. Reset password
async function resetPassword(req, res) {
  const { username, code, newPassword } = req.body;
  const user = await User.findOne({ username, resetCode: code });
  if (!user || user.resetCodeExpiry < Date.now()) {
    return res.status(400).json({ message: 'Invalid or expired code' });
  }
  user.password = await bcrypt.hash(newPassword, 10);
  user.resetCode = undefined;
  user.resetCodeExpiry = undefined;
  await user.save();
  res.json({ message: 'Password reset successful' });
}

module.exports = { forgotPassword, verifyCode, resetPassword };